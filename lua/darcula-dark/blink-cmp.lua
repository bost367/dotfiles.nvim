local hi = vim.api.nvim_set_hl
local palette = require("darcula-dark.palette")

hi(0, "BlinkCmpMenu", { bg = palette.editor.background, fg = "#B6BFB8" })
hi(0, "BlinkCmpMenuBorder", { bg = palette.editor.background, fg = palette.editor.separator })
hi(0, "BlinkCmpMenuSelection", { bg = palette.interface.cursor_line })
hi(0, "BlinkCmpScrollBarGutter", { fg = "#616264" })
hi(0, "BlinkCmpLabel", { fg = palette.editor.text })
hi(0, "BlinkCmpLabelDeprecated", { fg = palette.editor.text, strikethrough = true })
hi(0, "BlinkCmpLabelMatch", { fg = "#538AF7" })
hi(0, "BlinkCmpLabelDetail", { fg = palette.interface.hint_text })
hi(0, "BlinkCmpLabelDescription", { fg = palette.interface.hint_text })
hi(0, "BlinkCmpSource", { fg = palette.interface.hint_text })
hi(0, "BlinkCmpDoc", { bg = palette.editor.background, fg = palette.editor.separator })
hi(0, "BlinkCmpDocBorder", { bg = palette.editor.background, fg = palette.editor.separator })
hi(0, "BlinkCmpDocSeparator", { bg = palette.editor.background, fg = palette.editor.separator })
hi(0, "BlinkCmpDocCursorLine", { bg = palette.editor.background, fg = palette.editor.separator })

-- Icon colors
hi(0, "BlinkCmpKind", { bg = palette.editor.background })
hi(0, "BlinkCmpKindText", { fg = palette.icon })
hi(0, "BlinkCmpKindVariable", { fg = palette.lang.default.keyword })
hi(0, "BlinkCmpKindField", { fg = palette.lang.default.constant })
hi(0, "BlinkCmpKindProperty", { fg = palette.lang.default.constant })
hi(0, "BlinkCmpKindEnum", { fg = palette.lang.default.constant })
hi(0, "BlinkCmpKindKeyword", { fg = palette.lang.default.keyword })
hi(0, "BlinkCmpKindEnumMember", { fg = palette.lang.default.str })
hi(0, "BlinkCmpKindConstant", { fg = palette.lang.default.keyword })
hi(0, "BlinkCmpKindStruct", { fg = palette.lang.default.constant })
hi(0, "BlinkCmpKindMethod", { fg = "#db5c5c" })
hi(0, "BlinkCmpKindFunction", { fg = "#db5c5c" })
hi(0, "BlinkCmpKindClass", { fg = "#db5c5c" })
hi(0, "BlinkCmpKindInterface", { fg = palette.lang.default.str })
hi(0, "BlinkCmpKindModule", { fg = palette.interface.active_element })
hi(0, "BlinkCmpKindSnippet", { fg = palette.icon })
